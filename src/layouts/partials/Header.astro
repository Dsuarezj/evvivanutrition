---
import Logo from "@/components/Logo.astro";
import menu from "@/config/menu.json";
import { useStoryblokApi } from '@storyblok/astro'

const pathname = new URL(Astro.request.url).pathname;

const storyblokApi = useStoryblokApi()
const { data } = await storyblokApi.get('cdn/stories/config', {
  version: 'draft',
  resolve_links: 'url',
})

const headerMenu = data?.story?.content?.header_menu
const name = data?.story?.content?.name
const job_title = data?.story?.content?.job_title
const email = data?.story?.content?.email

function transformMenuLinksString(linksString: string) {
  const linksArray = linksString.replace(/[{}]/g, '').split('},').map(link => link.trim());
  const transformedLinks = linksArray.map(link => {
    if (!link) return;
    const [namePart, urlPart] = link.split(';').map(part => part.trim());
    const name = namePart.split(':')[1].trim().replace(/"/g, '');
    const url = urlPart.split(':')[1].trim().replace(/"/g, '');
    return { name, url };
  });

  return transformedLinks;
}

const main = headerMenu?.map((menu: HeaderMenuLink) => ({
  name: menu.name,
  url: menu.url.cached_url == 'home' ? '/' : menu.url.cached_url,
  hasChildren: menu.hasChildren,
  children: transformMenuLinksString(menu.children).map((child) => ({
    name: child?.name,
    url: child?.url,
  })),
}))


export interface HeaderMenuLink {
  url: {
    id: string;
    url: string;
    linktype: string;
    fieldtype: string;
    cached_url: string;
  };
  _uid: string;
  name: string;
  children: string;
  component: string;
  hasChildren: boolean;
  _editable: string;
}

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}


//const { main }: { main: NavigationLink[] } = menu;
---
<div class="info-bar bg-[#a0ce4e] text-right text-white p-2 text-s mb-8">
  <span class="mr-4 hidden md:inline">{name}</span>
  <span class="mr-4 hidden md:inline">|</span>
  <span class="mr-4 hidden md:inline">{job_title}</span>
  <span class="mr-4 hidden md:inline">|</span>
  <a href={"mailto:" + email} class="mr-4">{email}</a>
</div>
<header class="header shadow-md">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0 md:flex md:justify-center md:w-full">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center md:order-1 md:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 cursor-pointer items-center md:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full md:order-1 md:flex md:w-auto md:space-x-3"
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative">
                <span class="nav-link inline-flex items-center">
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul class="nav-dropdown-list hidden group-hover:block md:invisible md:absolute md:block md:opacity-0 md:group-hover:visible md:group-hover:opacity-100">
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          pathname === child.url && "nav-link-active"
                        }`}
                        target={child.name.toLowerCase().includes("book") ? "_blank" : "_self"}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link block ${
                    pathname === menu.url && "nav-link-active"
                  }`}
                  target={menu.name.toLowerCase().includes("book") ? "_blank" : "_self"}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
  </nav>
</header>
